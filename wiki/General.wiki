#summary General details about the project
#labels Phase-Design
#sidebar Contents

<wiki:toc max_depth="3" />
-------------------------------------------------------------------------------------------------

=== Coding Style ===

====General stuff====

 * Use 8-space tabs for indentation.

 * Place braces in the Kernighan and Ritchie style: put the opening brace last on the line, and put the
closing brace first. One exception is made for functions: they  have the opening brace at the beginning
of the next line.

 * Comments: Use only "/'*'...'*'/" for commenting.
The preferred style for long (multi-line) comments is:
/'*'
'*' Bla bla bla. This it should be a multi-line comment.
'*' Another description goes here.
'*'/

 * Functions should be declared on a single line, like this:
void foo(int arg1, int arg2)
{
...
}
When defining a function, parameter order is: inputs, then outputs. 
If you consider the function is important and the name, or the code is not self-explanatory,
put a short description before the function declaration, like this:

/*
* This should add the tag and the information about the file with 
* the coresponding path to the database
*/
void add_tag(char * tag, char *path)
{
...
}

===Naming====

 * Structures are defined with typedef, and they have the suffix "`_`t", in general. 
 * Macros and enumerations are uppercase.
 * Function and variable names are lowercase, with underscores to separate words.

=====Functions=====

 * All the main functions from the HybFS core, used for interfacing with FUSE, should be named hybfs`_*` .
 * All the functions that provide access to the BDB (Berkely Database), should be named db`_*` . Some exceptions are possible, when access is needed from functions that are used for other purposes.
 * All the functions that are used for operations on queries (or virtual directories) should be named vdir`_*`.
 * For internal functions within a single source file, a short simple name is acceptable,since they are not globally visible and thus you do not need the module/submodule prefix. Also, for miscellaneous functions, 

-----------------------------------------------------------------------------------------------------

=== Project Hierarchy===

 * bin/   - All the executables from this project should rest here. It's useful when there will be more than one module, each one having it's own directory.
 * libs/  - The hybfs core library and the parser library
 * doc/   - The documentation for this project: this includes the final paper, and a pdf with all the information presented on this wiki. Also, it has all the documentation generated by doxygen (html, man and latex)
 * src/   - Each main module should have it's own directory. All the headers go in the *include/* directory, unless is something really not worth mentioning.
 	* hybfs-core/     - The source files for the backend interface can be found here. This will result in a library that can be used by the FUSE module
 	* hybfs-fuse/     - The file system interface, based on FUSE
 	* module-manager/ - The policy and external modules (for EXIF, MP3) framework
 	* include/        - All the includes. These can be broken in : the headers used with the hybfs library (core/) and the ones used by the module manager (modules/)
 * extensions/ - The external open source projects that we are using ( the headers and libraries for EXIF and MP3 parsing)
 * sqlite/     - The current version of sqlite3 library that we are using.
 * tests/  - Scripts and other applications (if any) designed to test our modules (and our ~~will~~ sanity) should rest in peace under this directory.

=== Analysis and Testing ===

In the first stage we will test the main functionalities offered by our filesystem. This could be easily integrated when implementing our policy framework.
After having a stable implementation, we will want to measure the performance penalty by running a standard benchmark. And, finally we will analyze how and if HybFS can be integrated with other overlay filesystems.

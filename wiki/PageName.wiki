#summary Short description of file operations for HybFS
#labels Phase-Design,Featured

----

= The concept =
HybFS file system is a compromise between the hierarchic and semantic file systems.
The user can organize files in a hierarchic way, but in the same time assign tags to the files.
This file system comes with two view perspectives to the user:
  # Hierarchic view of the files
  # Semantic view of the files

== How is meta-information defined in HybFS ==

Each file can be described using one or multiple tags. A tag is regarded as an attribute for the file. 
Now, the file can be described by two types of tags:
  # Simple tags
  # Attribute-value associations

*Simple tags* are attributes that can be added to describe a file. As for *attribute-vale* tags, they are used to granulate even more the description for a file. The attribute is criteria of description the and the value is the subcategory.

Ex: _the file_ *photo1.jpg* _can have as simple tags_ *holiday* _and_ *ski* _, and as for the attribute-value tags_ *year:2005* _,_ *author:stefania* _and_ *type:jpeg*.

In the example above, the file *photo1.jpg* has 2 simple tags: *holiday* and *ski*. To find this file, the user can search for the files that have *holiday* or *ski* defined as keywords. But, there can a lot of files that have defined as tags *ski* and *holiday*. The file has also defined some _attribute-value_ tags. The first tag, *year:2005* sets an attribute *year* with the value *2005*. This makes it easier for the user to categorize files using tags. Instead of defining only simple tags, he can define simple, clear attributes that permit to differentiate between files.



In order for the user to have also a hierarchic view, all files in the HybFS have 2 special attribute-value tags:
  * path:file_path (file path without the filename)
  * filename:file_name (the exact file name as in the hierarchic file system)

= File operations =

The navigation in HybFS resembles the navigation through a normal hierarchic file system, except the path is in fact a *query* on the tag information associated with the files.
The hierarchic file system shell operations remain unchanged for HybFS. The only difference is that you can provide a *query* instead of a *file path*.

== Meta Information ==
The commands remain unchanged, but all this comes with a price: the files in our system can't use the following characters:
  * *(*
  * *)*
  * *:*
  * *+*
  * *|*
  * *!*

These characters are needed to form the queries on semantic information.

== Query syntax ==

The queries will support the following logic operators:
  * *+* - logic *AND*
  * *|* - logic *OR*
  * *!* - logic *NOT*

Beside logic operators, brackets can be used for more complicated queries.

Ex: *ls (type:photo + year:2005) + (!ski + !snowboard)* - will display all files that have the tag *type:photo* and *year:2005*, but they don't have *ski* and *snowboard* tags.





== Commands Interpretation ==

Our objective here is to keep the command syntax for the hierarchic file system commands and in the same time to seamlessly add semantic operations.

Concerning *navigation*, the system will be *2-Dimensional*:
  * the current folder as we all know it in hierarchical file systems
  * the current folder (virtual folder), which is in fact a *query*

HybFS does not permit file names with *'('* and *')'*, so the all queries are between brackets. If the path is between brackets, it will be interpreted as a query, otherwise a simple file path relative to the hierarchic file system.

=== ls ===
*ls* will list all files based on a query (if a query exists). If there are no semantic queries, the *ls* command will behave as it would in a hierarchic file system.

ex: *ls (type:photo + year:2005)* will list:
*ski* *holiday* *summer* _photoComposition-2005.jpg_

*ski, holiday* and *summer* being virtual directories and *photoComposition-2005.jpg* being a file. What does this output stands for? The command was issued to list all files that have *type:photo* and *year:2005* tags. The file *photoComposition-2005.jpg* has only these 2 tags set. But there are files that have other tags too, like *holiday*, *summer* or *ski*. These files are grouped in *virtual folders* which have the name of the remaining tags (tags that were not included in the query). 

Why not just listing all files that have *type:photo* and *year:2005* tags. Well, one of the drawbacks of full semantic file systems is that there the user doesn't receive any suggestions when navigating through the files. He has to know what he is looking for. In our example, when he looks for files that are *photos* and have been taken in *2005*, he may not know that these files have other tags also and can be filtered even more.


=== cd ===



=== pwd ===
=== cp ===
=== mv ===
=== rm ===
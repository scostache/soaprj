#summary HybFS Overview
#labels Featured
#sidebar Contents

= Project overview =

HybFS is an _almost_ semantic file system on Linux that can be overlaid on other file systems and provide multiple organizational views of the same original hierarchy of files, without altering the interface for the existing applications. 
This is realized by associating multiple _tags_ with files. A user can create and assign many tags to a file or groups of files containing other tags. The browsing and file operations can be done by using the concept of _virtual_ _directory_. We can think of a virtual directory as a combination of tags, using logic operators like disjunction, conjunction or negation. This will also be known as a _query_.

In a semantic file system, the navigation is based on the additional metadata associated with files, therefore offering multiple views of the same files. In a hierarchical file system, there is only one organizational view of the data, and a file can be identified in a unique way using this view. We mentioned that HybFS is an _almost_ semantic file system, because it actually represents a compromise between the hierarchic and semantic file systems. The user can organize files in a hierarchic way, but in the same time can assign tags, or keywords, to the files. This file system comes with two view perspectives to the user:
  # Hierarchic view of the files
  # Semantic view of the files


== Primary aims ==

For having a basic functionality, we define the following set of aims that must be completed during the allocated time:
 # Implement operations on simple tags and tags with values. A user can create, modify or delete the tags associated to a file.
 # Implement support for queries based on multiple tags.
 # Mount the semantic file system on top of multiple directories (support multiple branches), regardless of the underlying file system(s), thus offering a unified view based on file metadata.
 # Allow operations on sets of files, identified by combinations of tags, also known as queries (for example: delete or move all files corresponding to a query, from the underlying file systems).



== Secondary aims ==

Having considered the limited time, we established a number of features with a lower priority. Still, these are desirable to have, in order to show the potential of a semantic file system.
 # Add semantic transducers to automatically extract metadata from new files.
 # Add metadata extraction/management policies for each mounted directory/branch, so that new files will be automatically labeled with the set of extracted keywords. As a proof-of-concept, this will be done for MP3 and EXIF metadata.
 # Create a separate application for a user-friendly policy management.
 # Create a set of scripts to automatically index files by adding the corresponding tags to the file system metadata - used for testing.


== Resources (or what you need...) ==
 * FUSE - We decided that for our file system implementation we should use the FUSE API, because it allows a rapid development. Also, we want to allow regular users to mount and configure our file system. 
 * Sqlite3 - For storing the associated meta-data we use embedded database engine that can be linked directly into an application.
 * Boost libraries - Offer a large set of functionalities and we will keep them for future use.
 * Lemon - For the generating the query parser

 * Doxygen - for documentation


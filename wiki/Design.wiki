#summary This page presents the design and functionality of HybFS
#labels Phase-Design
#sidebar HybFS

<wiki:toc max_depth="3" />

----------------------------------------------------------------------------------------

= HybFS meta-information =

Each file can be described by using one or multiple tags. A tag represents an additional attribute set by the user. The tags can be simple, or have an associated value.

*Simple tags* are specific keywords added to describe a file. The *attribute-value* tags  are used to granulate even more the description. In this case, the attribute represents the criteria of description and the value is the subcategory. 
Ex: _the file_ *photo1.jpg* _can have as simple tags_ *holiday* _and_ *ski* _, and as attribute-value tags_ *year:2005* _,_ *author:stefania* _and_ *type:jpeg*.

To find the file from the above example, we can specify a path that can be a combination of *holiday* or/and *ski*. To further differentiate between the results of this query, we can also mention the value *2005* for the tag *year* .

In order for the user to have also a hierarchic view, all files in the HybFS have 2 special attribute-value tags:
  * path:file_path (file path without the filename)
  * filename:file_name (the exact file name as in the hierarchic file system)

----------------------------------------------------------------------------------------

= Semantics of HybFS operations =

The navigation in HybFS resembles the navigation through a normal hierarchic file system, except the path is in fact a *query* on the tag information associated with the files. From the application point of view, the file system operations remain unchanged when using HybFS. 

== Query syntax ==

The queries will support the following logic operators:
  * *+* - logic *AND*
  * *|* - logic *OR*
  * *!* - logic *NOT*

Beside logic operators, brackets can be used for more complicated queries.

Ex: *ls '(type:photo + year:2005) + (!ski + !snowboard)'* - will display all files that have the tag *type:photo* and *year:2005*, but they don't have *ski* and *snowboard* tags.

== Limitations ==

Because a complex query has a certain syntax, the following characters are reserved for describing the possible queries or the tag-associated values:
  * *(*
  * *)*
  * *:*
  * *+*
  * *|*
  * *!*

== HybFS operations ==

Our objective here is to keep the same interface as for the hierarchic file system operations and in the same time to seamlessly add semantic operations.

Concerning *navigation*, the system will be *2-Dimensional*:
  * the current path from the hierarchical file system(s) or:
  * the current virtual folder, which retains the current query

HybFS does not permit file names with *'('* and *')'*, due to complex queries that need brackets. If the path is between brackets, it will be interpreted as a query, otherwise it represents a simple file path relative to the hierarchic file system.


=== File listing ===

All files will be listed based on a query (if a query exists). If there are no semantic queries, the behavior will be the same as in a hierarchic file system.

One of the possible drawbacks of full semantic file systems is that the user doesn't receive any suggestions when navigating through the files and it has to know what is looking for. This was solved by adding virtual folders to refine the results of the navigation. In our example, when we look for files that are *photos* and have been taken in *2005*, we may not know that these files have other tags also and can be filtered even more. Further more, by having this extra information we can discover other files that share the same information/tags as the listed ones. 

Example: 
Suppose that we want to list all files  that have the *type:photo* and *year:2005* tags:
{{{ 
ls (type:photo + year:2005)
}}}
The output will be something like:
{{{ 
ski/ holiday/ summer/ photoComposition-2005.jpg 
}}}

where *ski, holiday* and *summer* are virtual directories and *photoComposition-2005.jpg* is a file. Suposing that the file *photoComposition-2005.jpg* has besides these two tags, the keywords _ski, holiday and summer_. Even if they weren't included in the query, they are still listed. 


=== File rename ===

Usually, in hierarchic file systems, to rename a file one should use the *mv* operation.
Used with two normal paths as parameters, the *mv* operation remains the same. Also, we can use queries to do that.

Example:
To rename the file *photo1.jpg* as *first_photo.jpg* you can issue the following command:
{{{
mv (path:/directory/path + filename:photo1.jpg) (path:/directory/path + filename:first_photo.jpg)
}}}
But why complicate yourself and not use *mv* with file pahts instead of queries?

=== File copy ===
A file can be copied using the *cp* file operation. You can use paths as parameters to copy a file as in a hierarchic file system, or you can use queries which modify the *path* and *filename* tags.
One thing to remember is when a file is copied, all its tags are copied also. In order to copy the file to a different location and add tags, you can issue the following command:
{{{
cp (path:/old/path + filename:old_name.jpg) (path:/new/path + new_tag)
}}}


=== Add/Remove tags ===

This is done using *cp*. Like in hierarchic file systems where with the *cp* command, a new file is created leaving the old file in place, the *cp* command used in HybFS with queries as parameters leaves the already defined tags and adds/removes specific tags.

Example:
For all the files that have *type:photography* and *ski* tags we want to add the tag *holiday*, to change the *type:photography* tag with *type:photo* tag and to remove the *bff* tag. In order to do this we issue the following command:
{{{
cp (type:photography + ski) (holiday + type:photo + !bff)
}}}
But this command doesn't do exactly what it is supposed to do. If there are files that have other tags than *type:photography* and *ski* defined, these files are not the results of the first query. In order to also refer the files that have other tags beside *type:photography* and *ski*, the correct command is:
{{{
cp (type:photography + ski + *) (holiday + type:photo + !bff)
}}}


=== Replace tags ===

The two operations supported by HybFS are implemented using *cp* and *mv* commands. They are related somehow with the classic *cp* and *mv* operations. 

This operation is done using *mv*. With the *mv* operation, all the tags from the files depicted by the first parameter (the first query) are removed, new tags being added. The second parameter is a special query (tags with an *AND* relation between them) that specifies which are the tags that will replace the original ones.

Example:
For all the files that have the *type:photo* and *author:stefania* tags deffined we want to delete all other tags and transform the *type:photo* into *type:jpg*. This operation can be done issuing the following command:  
{{{
mv (type:photo + author:stefania + *) (type:jpg + author:stefania)
}}}

Why couldn't we do this with the *cp* file operation. This is because with *cp* we have to know the other tags beside *type:photo* and *author:stefania* to negate them in the second statement. So, it is easier to execute a *mv* command.

=== File remove ===
In order to actually remove a file, you can use the *rm* as in a hierarchical file system, or you can use a query to point out the files based on tag information.

With the use of *rm*, all files resulted from the query will be deleted along with their tag information from the DB.

=== File creation ===
Done as in a hierarchical file system.

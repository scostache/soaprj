#summary HybFS and additional modules implementation details
#labels Phase-Implementation
#sidebar Contents

== HybFS Implementation ==

The implementation of HybFS consists of three modules grouped togheter in one application. There is the frontend FUSE filesystem (also called "the hybfs core") and a backend comprising of a parser and the Berkley Database storage used for keeping the tag-files associations. The abstract flow of a request (or user operation) can be seen in the following diagram. The HybFS core interface makes the appropiate calls to the parser, the database and the underlying filesystem. The interface offered to the user processes remains unmodified.

(put pretty image here)

 # A file system operation is issued (think of open, create, rename, unlink, etc.) and is passed to the HybFS filesystem. 
 # The provided path is analyzed and validated by _the query parser_ and the results are packed in an internal representation used afterwards to issue operations to the database backend.
 # The metadata from the main databases (as they are called in BDB) is accesed and/or modified.
 # The results are returned to the HybFS core.
 # Based on the results obtained, and if needed, the core interface issues a series of operations to the underlying filesystem(s).

-----------------------------------------------------------------------------------------------------------------------------------

=== Frontend ===

 * For now, we support only one directory specified at mount time. Hopefully, the listing of files based on tags will be available soon, togheter with the tagging operation.

=== Backend ===

 * The parser is (still) not implemented.
 * The Berkeley Database is linked in the application. We set the metadata directory in each mount point (branch), with the name _.hybfs_ .



